(start)
(use 'dev)
(start)
(use 'dev)
(start)
(use 'dev)
(start)
(use 'dev)
(start)
(use 'dev)
(start)
(use 'dev)
(start)
(use 'dev)
(start)
(use 'dev)
(start)
(use 'dev)
(start)
(use 'dev)
(start)
(use 'dev)
(start)
(use 'dev)
(start)
(use 'dev)
(start)
(use 'dev)
(start)
(use 'dev)
(start)
(use 'dev)
(start)
(use 'dev)
(start)
(use 'dev)
(start)
(use 'dev)
(start)
(use 'dev)
(start)
(use 'dev)
(start)
(use 'dev)
(start)
(use 'dev)
(start)
(use 'dev)
(start)
(use 'dev)
(start)
(use 'dev)
(start)
(use 'dev)
(start)
(use 'dev)
(start)
(use 'dev)
(start)
(use 'dev)
(start)
(use 'dev)
(start)
(use 'dev)
(start)
(use 'dev)
(start)
(use 'dev)
(start)
(use 'dev)
(start)
(use 'dev)
(start)
(use 'dev)
(start)
(use 'dev)
(start)
(use 'dev)
(start)
(use 'dev)
(start)
(use 'dev)
(start)
(use 'dev)
(start)
(use 'dev)
(start)
(use 'dev)
(start)
(use 'dev)
(start)
(use 'dev)
(start)
(use 'dev)
(start)
(use 'dev)
(start)
(use 'dev)
(start)
(use 'dev)
(start)
(use 'dev)
(start)
(use 'dev)
(start)
(use 'dev)
(start)
(use 'dev)
(start)
(use 'dev)
(start)
(use 'dev)
(start)
(use 'dev)
(start)
(use 'dev)
(start)
(use 'dev)
(start)
(ns clojure_bank.peer)
(results)
(find_creditcard_by_number 1)
(find_creditcard_by_number 2)
(find_creditcard_by_number "1282923")
(ns clojure_bank.peer)
(find_creditcard_by_number "1282923")
(find_creditcard_by_number "000000000")
(find_creditcard_by_number "0000000000")
(ns clojure_bank.peer)
(find_creditcard_by_number "0000000000")
(find_creditcard_by_number "1282923")
(find_creditcard_by_number "0000000000")
(ns clojure_bank.peer)
(find_creditcard_by_number "0000000000")
(find_creditcard_by_number "0000000001")
(find_creditcard_by_number "0")
(find_creditcard_by_number "0000000001")
(ns clojure_bank.peer)
(find_creditcard_by_number "0000000001")
(find_creditcard_by_number "0000000000")
(ns clojure_bank.peer)
(find_creditcard_by_number "0000000000")
(find_creditcard_by_number "000000000123")
(q '[:find ?c :where [?c :creditcard/number "00000000"]] (d/db conn))
(q '[:find ?c :where [?c :creditcard/number "00000000"]] (d/db (d/connect uri)))
(q '[:find ?c :where [?c :creditcard/number "0000000000"]] (d/db (d/connect uri)))
    (q '[:find ?c :where [?c :creditcard/number]] (d/db (d/connect uri)))
(q '[:find ?c :where [?c :creditcard/number]] (d/db (d/connect uri)))
(q '[:find ?r :where [?c :creditcard/number]] (d/db (d/connect uri)))
(q '[:find ?e :where [?c :creditcard/number]] (d/db (d/connect uri)))
(q '[:find ?e :where [?e :creditcard/number]] (d/db (d/connect uri)))
q '[:find ?c :where [?e :hello/color ?c]] (d/db conn))))
(q '[:find ?e :where [?e :creditcard/number ?c]] (d/db (d/connect uri)))
(q '[:find ?c :where [?e :creditcard/number ?c]] (d/db (d/connect uri)))
(q '[:find ?c :where [?e :creditcard/number "0000000002"]] (d/db (d/connect uri)))
(q '[:find ?c :where [?e :creditcard/number ?c]] (d/db (d/connect uri)))
(q '[:find ?c :where [?c :creditcard/number ?c]] (d/db (d/connect uri)))
(q '[:find ?c :where [?e :creditcard/number ?c]] (d/db (d/connect uri)))
(q '[:find ?e :where [?c :creditcard/number ?c]] (d/db (d/connect uri)))
(q '[:find ?e :where [?c :creditcard/number ?e]] (d/db (d/connect uri)))
(q '[:find ?c :where [?c :creditcard/number "0000000002"]] (d/db (d/connect uri)))
(q '[:find ?c :where [?c :creditcard/number "0000000001"]] (d/db (d/connect uri)))
(q '[:find ?c :where [?c :creditcard/number "0000000000"]] (d/db (d/connect uri)))
(q '[:find ?c :where [?c :creditcard/number "000000000"]] (d/db (d/connect uri)))
(q '[:find ?c :where [?c :creditcard/number "0000000000"]] (d/db (d/connect uri)))
(q '[:find ?c :where [?c :creditcard/number "0000000001"]] (d/db (d/connect uri)))
(ns clojure_bank.peer)
(q '[:find ?c :where [?c :creditcard/number "0000000001"]] (d/db (d/connect uri)))
(ns clojure_bank.peer)
(q '[:find ?c :where [?c :creditcard/number "000000000"]] (d/db (d/connect uri)))
(q '[:find ?c :where [?e :creditcard/number ?c]] (d/db (d/connect uri)))
(ns clojure_bank.peer)
(q '[:find ?c :where [?e :creditcard/number ?c]] (d/db (d/connect uri)))
(ns clojure_bank.peer)
(q '[:find ?c :where [?e :creditcard/number ?c]] (d/db (d/connect uri)))
(ns clojure_bank.peer)
(q '[:find ?c :where [?e :creditcard/number ?c]] (d/db (d/connect uri)))
(q '[])
(ns clojure_bank.peer)
(q '[:find ?c :where [?e :creditcard/number ?c]] (d/db (d/connect uri)))
(ns clojure_bank.peer)
(q '[:find ?c :where [?e :creditcard/number ?c]] (d/db (d/connect uri)))
(ns clojure_bank.peer)
(q '[:find ?c :where [?e :creditcard/number ?c]] (d/db (d/connect uri)))
uri
(ns clojure_bank.peer)
init-db
(q '[:find ?c :where [?e :creditcard/number ?c]] (d/db (d/connect uri)))
results
(find_creditcard_by_number 100)
(find_creditcard_by_number 10)
(find_creditcard_by_number 100000)
(q '[:find ?c :where [?e :creditcard/number ?c]] (d/db (d/connect uri)))
(q '[:find ?c :where [?e :creditcard/number 1]] (d/db (d/connect uri)))
(q '[:find ?c :where [?e :creditcard/number ?c]] (d/db (d/connect uri)))
results
(ns clojure_bank.peer)
(q '[:find ?c :where [?e :creditcard/number ?c]] (d/db (d/connect uri)))
results
(q '[:find ?c :where [?e :creditcard/number ?c]] (d/db (d/connect uri)))
(find_creditcard_by_number 100000)
(q '[:find ?c :where [?e :creditcard/number ?c]] (d/db (d/connect uri)))
(q '[:find ?c :where [?e :creditcard/id ?c]] (d/db (d/connect uri)))
(q '[:find ?c :where [?e :creditcard/number ?c]] (d/db (d/connect uri)))
(q '[:find ?c :where [?e :creditcard/number "1"]] (d/db (d/connect uri)))
(q '[:find ?e :where [?e :creditcard/number "1"]] (d/db (d/connect uri)))
(q '[:find ?e :where [?e :creditcard/number "100000000"]] (d/db (d/connect uri)))
(q '[:find ?e :where [?e :creditcard/number "0000000002"]] (d/db (d/connect uri)))
(q '[:find ?e :where [?e :creditcard/number "0000000001"]] (d/db (d/connect uri)))
(q '[:find ?e :where [?e :creditcard/number "0000000000"]] (d/db (d/connect uri)))
(q '[:find ?e :where [?e :creditcard/number "0000000000"]] (d/db (d/connect uri)))    (decorate (ffirst (q '[:find ?e :where [?e :creditcard/number number]] (d/db conn))))
(let [number "0000000000"])
(let [number "0000000000"]
    (decorate (ffirst (q '[:find ?e :where [?e :creditcard/number number]] (d/db conn))))
)
(defn decorate 
  "Simple function to pull out all the attributes of an entity into a map"
  [id]
  (let [conn (d/connect uri)]
    (let [ db (d/db conn) e (d/entity db id)]
      (select-keys e (keys e))))
)
    (decorate (ffirst (q '[:find ?e :where [?e :creditcard/number number]] (d/db conn))))
    (decorate (ffirst (q '[:find ?e :where [?e :creditcard/number number]] (d/db d/connect uri))))
    (decorate (ffirst (q '[:find ?e :where [?e :creditcard/number number]] (d/db (d/connect uri)))))
(ns clojure_bank.peer)
    (decorate (ffirst (q '[:find ?e :where [?e :creditcard/number number]] (d/db (d/connect uri)))))
(find_creditcard_by_number 100000)
    (decorate (ffirst (q '[:find ?e :where [?e :creditcard/number number]] (d/db (d/connect uri)))))
    (decorate (ffirst (q '[:find ?e :where [?e :creditcard/number "0000000001"]] (d/db (d/connect uri)))))
(find_creditcard_by_number "0000000001")
(defn xpto[number] number)
xpto 1
xpto 100
(defn xpto[number] number)
(defn xpto[number] (let [x 1] x ))
xpto 100
(defn xpto[number] (let [x 1] number ))
xpto 100
(defn xpto[number] (let [x 1] number ))
(defn xpto[number] (let [x 1] 0 ))
xpto 100
(defn kkk[number] (let [x 1] number ))
kkk 11
    (decorate (ffirst (q '[:find ?e :where [?e :creditcard/number "0000000001"]] (d/db (d/connect uri)))))
(let [number "0000000001"] (decorate (ffirst (q '[:find ?e :where [?e :creditcard/number number]] (d/db (d/connect uri))))))
(decorate (ffirst (q '[:find ?e :where [?e :creditcard/number "0000000001"]] (d/db (d/connect uri)))))
(let [number "000000001"] number)
(decorate (ffirst (q '[:find ?e :where [?e :creditcard/number "0000000001"]] (d/db (d/connect uri)))))
(decorate (ffirst (q '[:find ?e :where [?e :creditcard/number "0000000001"]] (d/db (d/connect uri) ))))
(decorate (ffirst (q '[:find ?e :where [?e :creditcard/number ?e]] (d/db (d/connect uri)  ))))
(let [number "0000000001"] 
(decorate (ffirst (q '[:find ?e :where [?e :creditcard/number "0000000001"]] (d/db (d/connect uri) ))))
)
(let [number "0000000001"] (decorate (ffirst (q '[:find ?e :where [?e :creditcard/number number]] (d/db (d/connect uri))))))
(let [number "0000000001"] (decorate (ffirst (q '[:find ?e :where [?e :creditcard/number number]] number (d/db (d/connect uri))))))
(decorate (ffirst ( q(let [number "0000000001"] '[:find ?e :where [?e :creditcard/number number]] (d/db (d/connect uri))))))
(decorate (ffirst ( q (let [number "0000000001"] '[:find ?e :where [?e :creditcard/number number]] (d/db (d/connect uri))))))
(let [number "0000000001"] (decorate (ffirst (q '[:find ?e :where [?e :creditcard/number number]] number (d/db (d/connect uri))))))
(decorate (ffirst (let [number "0000000001"] ( q '[:find ?e :where [?e :creditcard/number number]] (d/db (d/connect uri))))))
(decorate (ffirst (q '[:find ?e :where [?e :creditcard/number "0000000001"]] (d/db (d/connect uri) ))))
(decorate (ffirst (q '[:find ?e :where [?e :creditcard/number "0000000002"]] (d/db (d/connect uri) ))))
(decorate (ffirst (q '[:find ?e :where [?e :creditcard/number "0000000003"]] (d/db (d/connect uri) ))))
(decorate (ffirst (let [number "0000000001"] ( q '[:find ?e :where [?e :creditcard/number 'number]] (d/db (d/connect uri))))))
(decorate (ffirst ,(let [number "0000000001"] ( q '[:find ?e :where [?e :creditcard/number 'number]] (d/db (d/connect uri))))))
(decorate (ffirst (let [number "0000000001"] ( q '[:find ?e :where [?e :creditcard/number 'number]] (d/db (d/connect uri))))))
(decorate (ffirst ,(let [number "0000000001"] ( q '[:find ?e :where [?e :creditcard/number 'number]] (d/db (d/connect uri))))))
(decorate (ffirst (let [number "0000000001"] ( q '[:find ?e :where [?e :creditcard/number 'number]] (d/db (d/connect uri))))))
(decorate (ffirst (let [number "0000000001"] ( q '[:find ?e in $number :where [?e :creditcard/number number]] (d/db (d/connect uri))))))
(let [number "0000000001"] (decorate (ffirst (q '[:find ?e :where [?e :creditcard/number number]] number (d/db (d/connect uri))))))
(let [number "0000000001"] (decorate (ffirst (q '[:find ?e :where [?e :creditcard/number number]] (d/db (d/connect uri))))))
(let [number "0000000001"] (decorate (ffirst (q '[:find ?e :in $number :where [?e :creditcard/number $number]] (d/db (d/connect uri))))))
(let [number "0000000001"] (decorate (ffirst (q '[:find ?e :in $number :where [?e :creditcard/number $number]] (d/db (d/connect uri) number)))))
(let [number "0000000001"] (decorate (ffirst (q '[:find ?e :in $number :where [?e :creditcard/number $number]] (d/db (d/connect uri)) number))))
(let [number "0000000001"] (decorate (ffirst (q '[:find ?e :where [?e :creditcard/number number]] number (d/db (d/connect uri))))))
(q '[:find ?e :in $number :where [?e :creditcard/number $number]] (d/db (d/connect uri))
(q '[:find ?e :in $number :where [?e :creditcard/number $number]] (d/db (d/connect uri)
(q '[:find ?e :in $number :where [?e :creditcard/number $number]] (d/db (d/connect uri)))
(q '[:find ?e :in $number :where [?e :creditcard/number $number]] (d/db (d/connect uri) "0000000001"))
(q '[:find ?e :in $number :where [?e :creditcard/number $number]] (d/db (d/connect uri)) "0000000001")
(q '[:find ?e :in $number :where [?e :creditcard/number $number]] "0000000001" (d/db (d/connect uri)))
(q '[:find ?e :in $number :where [?e :creditcard/number $number]] (d/db (d/connect uri)) "0000000001")
(q '[:find ?e :in $number :where [?e :creditcard/number $number]] (d/db (d/connect uri)))
(q '[:find ?e :in $number :where [?e :creditcard/number number]] (d/db (d/connect uri)))
(q '[:find ?e :in number :where [?e :creditcard/number $number]] (d/db (d/connect uri)))
(q '[:find ?e :in number :where [?e :creditcard/number number]] (d/db (d/connect uri)))
(q '[:find ?e :in "(q '[:find ?e :in $number :where [?e :creditcard/number $number]] (d/db (d/connect uri)) "0000000001")" :where [?e :creditcard/number number]] (d/db (d/connect uri)))
(q '[:find ?e :in number :where [?e :creditcard/number "0000000001"]] (d/db (d/connect uri)))
(q '[:find ?e :in $ ?number :where [?e :creditcard/number ?number]] (d/db (d/connect uri)))
(q '[:find ?e :in $ ?number :where [?e :creditcard/number ?number]] (d/db (d/connect uri)) "0000000001")
(q ind ?e :in $ ?number :where [?e :creditcard/number ?number]] (d/db (d/connect uri)) "0000000001")
(q '[:find ?e :in $ ?number :where [?e :creditcard/number ?number]] (d/db (d/connect uri)) "0000000001")
(q ind ?e :in $ ?number :where [?e :creditcard/number ?number]] (d/db (d/connect uri)) "0000000001")
(q '[:find ?e :in $ ?number :where [?e :creditcard/number ?number]] (d/db (d/connect uri)) "0000000001")
(q '[:find ?e :in $ ?number :where [?e :creditcard/number ?number]] (d/db (d/connect uri)) "0000000000")
(q '[:find ?e :in $ ?number :where [?e :creditcard/number ?number]] (d/db (d/connect uri)) "0000000001")
(q '[:find ?e :in $ ?number :where [?e :creditcard/number ?number]] (d/db (d/connect uri)) "0000000002")
(decorate (ffirst (q '[:find ?e :where [?e :creditcard/number number]] (d/db conn))))
(decorate (ffirst (q '[:find ?e :where [?e :creditcard/number number]] (d/db (d/connect uri)))))
(decorate (ffirst (q '[:find ?e :where [?e :creditcard/number number]] (d/db (d/connect uri)) "0000000002")))
(decorate (ffirst (q '[:find $ ?number ?e :where [?e :creditcard/number ?number]] (d/db (d/connect uri)) "0000000002")))
(q '[:find ?e :in $ ?number :where [?e :creditcard/number ?number]] (d/db (d/connect uri)) "0000000000")
(decorate (ffirst (q '[:find $ ?number ?e :where [?e :creditcard/number ?number]] (d/db (d/connect uri)) "0000000002")))
(decorate (ffirst (q '[:find ?e :in $ ?number :where [?e :creditcard/number ?number]] (d/db (d/connect uri)) "0000000002")))
(ns clojure_bank.peer)
(find_creditcard_by_number "0000000001")
(find_creditcard_by_number "0000000002")
(start)
(use 'dev)
(start)
@(d/transact conn :creditcard/name "Konrad Scorciapino", :creditcard/number "0000000002", :creditcard/cvv "000", :creditcard/outstanding_balance 100.0, :creditcard/available_balance 100.0})
@(d/transact conn {:creditcard/name "Konrad Scorciapino", :creditcard/number "0000000002", :creditcard/cvv "000", :creditcard/outstanding_balance 100.0, :creditcard/available_balance 100.0})
@(d/transact  {:creditcard/name "Konrad Scorciapino", :creditcard/number "0000000002", :creditcard/cvv "000", :creditcard/outstanding_balance 100.0, :creditcard/available_balance 100.0})
(d/transact { :db/id #db/id[:db.part/user -1], :creditcard/name "Thiago Massa", :creditcard/number "0000000000", :creditcard/cvv "000", :creditcard/available_balance 100.0, :creditcard/outstanding_balance 100.0 })
(d/transact (d/db conn) { :db/id #db/id[:db.part/user -1], :creditcard/name "Thiago Massa", :creditcard/number "0000000000", :creditcard/cvv "000", :creditcard/available_balance 100.0, :creditcard/outstanding_balance 100.0 })
(ns clojure_bank.peer)
(d/transact (d/db conn) { :db/id #db/id[:db.part/user -1], :creditcard/name "Thiago Massa", :creditcard/number "0000000000", :creditcard/cvv "000", :creditcard/available_balance 100.0, :creditcard/outstanding_balance 100.0 })
(find_creditcard_by_number "0000000002")
(d/transact (d/db conn) { :db/id #db/id[:db.part/user -1], :creditcard/name "Thiago Massa", :creditcard/number "0000000000", :creditcard/cvv "000", :creditcard/available_balance 100.0, :creditcard/outstanding_balance 100.0 })
(d/transact (d/db (d/connect uri)) { :db/id #db/id[:db.part/user -1], :creditcard/name "Thiago Massa", :creditcard/number "0000000000", :creditcard/cvv "000", :creditcard/available_balance 100.0, :creditcard/outstanding_balance 100.0 })
(d/transact ((d/connect uri)) { :db/id #db/id[:db.part/user -1], :creditcard/name "Thiago Massa", :creditcard/number "0000000000", :creditcard/cvv "000", :creditcard/available_balance 100.0, :creditcard/outstanding_balance 100.0 })
@(d/transact conn {:creditcard/name "Konrad Scorciapino", :creditcard/number "0000000002", :creditcard/cvv "000", :creditcard/outstanding_balance 100.0, :creditcard/available_balance 100.0})
@(d/transact (d/connect uri) {:creditcard/name "Konrad Scorciapino", :creditcard/number "0000000002", :creditcard/cvv "000", :creditcard/outstanding_balance 100.0, :creditcard/available_balance 100.0})
@(d/transact (d/connect uri) [{:creditcard/name "Konrad Scorciapino", :creditcard/number "0000000002", :creditcard/cvv "000", :creditcard/outstanding_balance 100.0, :creditcard/available_balance 100.0}])
@(d/transact (d/connect uri) {:db/id #db/id[:db.part/user -10], :creditcard/name "Konrad Scorciapino", :creditcard/number "0000000002", :creditcard/cvv "000", :creditcard/outstanding_balance 100.0, :creditcard/available_balance 100.0}])
@(d/transact (d/connect uri) {:db/id #db/id[:db.part/user -10], :creditcard/name "Konrad Scorciapino", :creditcard/number "0000000002", :creditcard/cvv "000", :creditcard/outstanding_balance 100.0, :creditcard/available_balance 100.0})
@(d/transact (d/connect uri) [{:db/id #db/id[:db.part/user -10], :creditcard/name "Konrad Scorciapino", :creditcard/number "0000000002", :creditcard/cvv "000", :creditcard/outstanding_balance 100.0, :creditcard/available_balance 100.0}])
(defn save-creditcard [creditcard-info]
  (init-db)
  (let [conn (d/connect uri)]
    (d/transact conn [creditcard-info])))
(save-creditcard {:name Howard Roark})
(save-creditcard {:name "Howard Roark"})
(save-creditcard {:name "Howard Roark" :number "02289213"})
(save-creditcard {:name "Howard Roark" :number "02289213" :db/id #db/id[:db.part/user -100]})
(save-creditcard {:creditcard/name "Howard Roark" :creditcard/number "02289213" :db/id #db/id[:db.part/user -100]})
(save-creditcard {:creditcard/name "Howard Roark" :creditcard/number "02289213" :db/id #db/id[:db.part/user]})
(map {name "Thi"})
(map {name "Thi"} (fn[k v]) [k v])
(map {name "Thi"} (fn[k v] k))
(map (fn[x] x) {name "Thi"})
(map (fn[x] {x}) {name "Thi"})
(map (fn[k v] k) {name "Thi"})
(map (fn[[k v]] k) {name "Thi"})
(map (fn[[k v]] [k]) {name "Thi"})
(map (fn[[k v]] k) {name "Thi"})
(map (fn[[k v]] [k v]) {name "Thi"})
(apply (map (fn[[k v]] [k v]) {name "Thi"}))
(apply hash-map (flatten (map (fn [[k v]]
[(s/upper-case (name k)) v]) r))))
(into {} (for [[k v] { :stuff 42 :like 13 :this 7 }]
           [(.toUpperCase (name k)) v]))
(into {} (for [[k v] { :stuff 42 :like 13 :this 7 }]:(join ("creditcard/" k)) v]))
(into {} (for [[k v] { :stuff 42 :like 13 :this 7 }](join ("creditcard/" k)) v]))
(into {} (for [[k v] { :stuff 42 :like 13 :this 7 }](join "creditcard/" k)) v]))
(into {} (for [[k v] { :stuff 42 :like 13 :this 7 }]:(join ("creditcard/" k)) v]))
(into {} (for [[k v] { :stuff 42 :like 13 :this 7 }][(.toUpperCase (name k)) v]))
(into {} (for [[k v] { :stuff 42 :like 13 :this 7 }][(join "creditcard/" k) v]))
(into {} (for [[k v] { :stuff 42 :like 13 :this 7 }][( "creditcard/" k) v]))
(+ "a" "b")
( "a" "b")
(conc "a" "b")
(cat "a" "b")
(str "a" "b")
:(str "a" "b")
(str "a" "b")
(symbol (str "a" "b"))
(str :a :b)
(into {} (for [[k v] { :stuff 42 :like 13 :this 7 }][( "creditcard/" k) v]))
(into {} (for [[k v] { :stuff 42 :like 13 :this 7 }][(str "creditcard/" k) v]))
(type :a)
(into {} (for [[k v] { :stuff 42 :like 13 :this 7 }][(keyword "creditcard" k) v]))
(into {} (for [[k v] { :stuff 42 :like 13 :this 7 }][(keyword :creditcard k) v]))
(keyword :xpto :x)
(keyword :xpto (str :x))
(keyword "x" (str :x))
(keyword (keyword "x") :x)
(keyword :xpto (doc :x))
(keyword "x" (doc :x))
(keyword "x" (name :x))
(into {} (for [[k v] { :stuff 42 :like 13 :this 7 }][(keyword "creditcard" (name k)) v]))
(defn namespace-map
  [nspace kword]
  (into {} (for [[k v] kword ][(keyword nspace (name k)) v]))
)
(namespace-map "bla" { :stuff 42 :like 13 :this 7 })
(ns 'app)
(ns app)
(ns app')
(ns apps')
(ns app')
(start)
(ns app)
(start)
(use 'dev)
(start)
(use 'dev)
(start)
(save-creditcard {:name "Howard roark" :number "00005"})
(ns clojure_bank.peer)
(save-creditcard {:name "Howard roark" :number "00005"})
(save-creditcard (merge {:name "Howard roark" :number "00005"} {:db/id #db/id[:db.part/user]}))
(merge {:name "Howard roark" :number "00005"} {:db/id #db/id[:db.part/user]})
(save-creditcard {:name "Howard roark" :number "00005" :db/id #db/id[:db.part/user]})
(save-creditcard {:name "Howard roark" :number "00005" :db/id #db/id[:db.part/user -1]})
(use 'dev)
(start)
(save-creditcard {:name "Howard roark" :number "00005"})
(ns clojure_bank.peer)
(save-creditcard {:name "Howard roark" :number "00005"})
(save-creditcard {:name "Howard roark" :number "05"})
(use 'dev)
(start)
(use 'dev)
(start)
(use 'dev)
(start)
(use 'dev)
(start)
(use 'dev)
(start)
(use 'dev)
(start)
(use 'dev)
(start)
(use 'dev)
(start)
(use 'dev)
(start)
(use 'dev)
(start)
(ns clojure_bank.peer)
{:name "Howard Roark", :number "123", :cvv "000", :outstanding_balance "100.0", :available_balance "100.0"}
(save-creditcard {:name "Howard Roark", :number "123", :cvv "000", :outstanding_balance "100.0", :available_balance "100.0"})
(read-string "0.002")
(map (fn[[k v]] ([k v])) {:name "Howard Roark", :number "123", :cvv "000", :outstanding_balance "100.0", :available_balance "100.0"})
(map (fn[[k v]] (1)) {:name "Howard Roark", :number "123", :cvv "000", :outstanding_balance "100.0", :available_balance "100.0"})
(map (fn[[k v]] k) {:name "Howard Roark", :number "123", :cvv "000", :outstanding_balance "100.0", :available_balance "100.0"})
(map (fn[[k v]] [k v]) {:name "Howard Roark", :number "123", :cvv "000", :outstanding_balance "100.0", :available_balance "100.0"})
(apply (map (fn[[k v]] [k v]) {:name "Howard Roark", :number "123", :cvv "000", :outstanding_balance "100.0", :available_balance "100.0"}))
(apply (fn[x y] (merge x y)) (map (fn[[k v]] [k v]) {:name "Howard Roark", :number "123", :cvv "000", :outstanding_balance "100.0", :available_balance "100.0"}))
(apply (fn[x] (merge x)) (map (fn[[k v]] [k v]) {:name "Howard Roark", :number "123", :cvv "000", :outstanding_balance "100.0", :available_balance "100.0"}))
(map (fn[[k v]] [k v]) {:name "Howard Roark", :number "123", :cvv "000", :outstanding_balance "100.0", :available_balance "100.0"})
(read-string "blabla")
(type (read-string "blabla"))
(type (read-string "0."))
(type (read-string "0.1"))
(map (fn[[k v]] [k v]) {:name "Howard Roark", :number "123", :cvv "000", :outstanding_balance "100.0", :available_balance "100.0"})
(merge (map (fn[[k v]] [k v]) {:name "Howard Roark", :number "123", :cvv "000", :outstanding_balance "100.0", :available_balance "100.0"}))
(merge (map (fn[[k v]] {k v}) {:name "Howard Roark", :number "123", :cvv "000", :outstanding_balance "100.0", :available_balance "100.0"}))
(merge (map (fn[[k v]] k v) {:name "Howard Roark", :number "123", :cvv "000", :outstanding_balance "100.0", :available_balance "100.0"}))
(merge (map (fn[[k v]] {k v}) {:name "Howard Roark", :number "123", :cvv "000", :outstanding_balance "100.0", :available_balance "100.0"}))
(apply map (fn[[k v]] {k v}) {:name "Howard Roark", :number "123", :cvv "000", :outstanding_balance "100.0", :available_balance "100.0"}))
(apply map (fn[[k v]] {k v}) {:name "Howard Roark", :number "123", :cvv "000", :outstanding_balance "100.0", :available_balance "100.0"})
(merge (map (fn[[k v]] k v) {:name "Howard Roark", :number "123", :cvv "000", :outstanding_balance "100.0", :available_balance "100.0"}))
(merge (map (fn[[k v]] {k v}) {:name "Howard Roark", :number "123", :cvv "000", :outstanding_balance "100.0", :available_balance "100.0"}))
(apply merge fn[h] h (map (fn[[k v]] {k v}) {:name "Howard Roark", :number "123", :cvv "000", :outstanding_balance "100.0", :available_balance "100.0"}))
(apply merge (fn[h] h (map (fn[[k v]] {k v}) {:name "Howard Roark", :number "123", :cvv "000", :outstanding_balance "100.0", :available_balance "100.0"})))
(merge (map (fn[[k v]] {k v}) {:name "Howard Roark", :number "123", :cvv "000", :outstanding_balance "100.0", :available_balance "100.0"}))
(reduce merge (map (fn[[k v]] {k v}) {:name "Howard Roark", :number "123", :cvv "000", :outstanding_balance "100.0", :available_balance "100.0"}))
(reduce merge (map (fn[[k v]] {k (read-string v)}) {:name "Howard Roark", :number "123", :cvv "000", :outstanding_balance "100.0", :available_balance "100.0"}))
(if (:abc==:abc) (read-string "1") ("1"))
(if (= :abc :abc) (read-string "1") ("1"))
(if (= :abc :abc) (read-string "1.0") ("1.0"))
(if (= :abc :abcd) (read-string "1.0") ("1.0"))
(if (= :abc :abcd) (read-string "1.0") "1.0")
(if (= :abc :abc) (read-string "1.0") "1.0")
(reduce merge (map (fn[[k v]] {k (if (= k :outstanding_balance) (read-string v) v)}) {:name "Howard Roark", :number "123", :cvv "000", :outstanding_balance "100.0", :available_balance "100.0"}))
(reduce merge (map (fn[[k v]] {k (if (some k '(:outstanding_balance)) (read-string v) v)}) {:name "Howard Roark", :number "123", :cvv "000", :outstanding_balance "100.0", :available_balance "100.0"}))
(reduce merge (map (fn[[k v]] {k (if (some '(:outstanding_balance) k) (read-string v) v)}) {:name "Howard Roark", :number "123", :cvv "000", :outstanding_balance "100.0", :available_balance "100.0"}))
(reduce merge (map (fn[[k v]] {k (if (some k [:outstanding_balance]) (read-string v) v)}) {:name "Howard Roark", :number "123", :cvv "000", :outstanding_balance "100.0", :available_balance "100.0"}))
(some :lol [:lol])
(in? :lol [:lol])
(in? :lol(defn in?  [:lol])
  "true if seq contains elm"
  [seq elm]  
  (some #(= elm %) seq))
(defn in? 
  "true if seq contains elm"
  [seq elm]  
  (some #(= elm %) seq))
(in? :lol(defn in?  [:lol])
(in? :lol(defn in?  [:lol]))
(in? :lol [:lol])
(in? [:lol] :lol)
(in? [:lol] :loll)
(reduce merge (map (fn[[k v]] {k (if (in? [:outstanding_balance] k) (read-string v) v)}) {:name "Howard Roark", :number "123", :cvv "000", :outstanding_balance "100.0", :available_balance "100.0"}))
(ns clojure_bank.peer)
(convert-parameters-to-type {:name "1.0"} [:name])
(use 'dev)
(start)
(use 'dev)
(start)
(ns clojure_bank.peer)
(save-creditcard {:name "Howard Roark", :number "123", :cvv "000", :outstanding_balance "100.0", :available_balance "100.0"})
(ns clojure_bank.peer)
(save-creditcard {:name "Howard Roark", :number "123", :cvv "000", :outstanding_balance "100.0", :available_balance "100.0"})
(type 100.0)
(ns clojure_bank.peer)
(save-creditcard {:name "Howard Roark", :number "123", :cvv "000", :outstanding_balance "100.0", :available_balance "100.0"})
