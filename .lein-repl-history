(decorate (ffirst (let [number "0000000001"] ( q '[:find ?e :where [?e :creditcard/number 'number]] (d/db (d/connect uri))))))
(decorate (ffirst (let [number "0000000001"] ( q '[:find ?e in $number :where [?e :creditcard/number number]] (d/db (d/connect uri))))))
(let [number "0000000001"] (decorate (ffirst (q '[:find ?e :where [?e :creditcard/number number]] number (d/db (d/connect uri))))))
(let [number "0000000001"] (decorate (ffirst (q '[:find ?e :where [?e :creditcard/number number]] (d/db (d/connect uri))))))
(let [number "0000000001"] (decorate (ffirst (q '[:find ?e :in $number :where [?e :creditcard/number $number]] (d/db (d/connect uri))))))
(let [number "0000000001"] (decorate (ffirst (q '[:find ?e :in $number :where [?e :creditcard/number $number]] (d/db (d/connect uri) number)))))
(let [number "0000000001"] (decorate (ffirst (q '[:find ?e :in $number :where [?e :creditcard/number $number]] (d/db (d/connect uri)) number))))
(let [number "0000000001"] (decorate (ffirst (q '[:find ?e :where [?e :creditcard/number number]] number (d/db (d/connect uri))))))
(q '[:find ?e :in $number :where [?e :creditcard/number $number]] (d/db (d/connect uri))
(q '[:find ?e :in $number :where [?e :creditcard/number $number]] (d/db (d/connect uri)
(q '[:find ?e :in $number :where [?e :creditcard/number $number]] (d/db (d/connect uri)))
(q '[:find ?e :in $number :where [?e :creditcard/number $number]] (d/db (d/connect uri) "0000000001"))
(q '[:find ?e :in $number :where [?e :creditcard/number $number]] (d/db (d/connect uri)) "0000000001")
(q '[:find ?e :in $number :where [?e :creditcard/number $number]] "0000000001" (d/db (d/connect uri)))
(q '[:find ?e :in $number :where [?e :creditcard/number $number]] (d/db (d/connect uri)) "0000000001")
(q '[:find ?e :in $number :where [?e :creditcard/number $number]] (d/db (d/connect uri)))
(q '[:find ?e :in $number :where [?e :creditcard/number number]] (d/db (d/connect uri)))
(q '[:find ?e :in number :where [?e :creditcard/number $number]] (d/db (d/connect uri)))
(q '[:find ?e :in number :where [?e :creditcard/number number]] (d/db (d/connect uri)))
(q '[:find ?e :in "(q '[:find ?e :in $number :where [?e :creditcard/number $number]] (d/db (d/connect uri)) "0000000001")" :where [?e :creditcard/number number]] (d/db (d/connect uri)))
(q '[:find ?e :in number :where [?e :creditcard/number "0000000001"]] (d/db (d/connect uri)))
(q '[:find ?e :in $ ?number :where [?e :creditcard/number ?number]] (d/db (d/connect uri)))
(q '[:find ?e :in $ ?number :where [?e :creditcard/number ?number]] (d/db (d/connect uri)) "0000000001")
(q ind ?e :in $ ?number :where [?e :creditcard/number ?number]] (d/db (d/connect uri)) "0000000001")
(q '[:find ?e :in $ ?number :where [?e :creditcard/number ?number]] (d/db (d/connect uri)) "0000000001")
(q ind ?e :in $ ?number :where [?e :creditcard/number ?number]] (d/db (d/connect uri)) "0000000001")
(q '[:find ?e :in $ ?number :where [?e :creditcard/number ?number]] (d/db (d/connect uri)) "0000000001")
(q '[:find ?e :in $ ?number :where [?e :creditcard/number ?number]] (d/db (d/connect uri)) "0000000000")
(q '[:find ?e :in $ ?number :where [?e :creditcard/number ?number]] (d/db (d/connect uri)) "0000000001")
(q '[:find ?e :in $ ?number :where [?e :creditcard/number ?number]] (d/db (d/connect uri)) "0000000002")
(decorate (ffirst (q '[:find ?e :where [?e :creditcard/number number]] (d/db conn))))
(decorate (ffirst (q '[:find ?e :where [?e :creditcard/number number]] (d/db (d/connect uri)))))
(decorate (ffirst (q '[:find ?e :where [?e :creditcard/number number]] (d/db (d/connect uri)) "0000000002")))
(decorate (ffirst (q '[:find $ ?number ?e :where [?e :creditcard/number ?number]] (d/db (d/connect uri)) "0000000002")))
(q '[:find ?e :in $ ?number :where [?e :creditcard/number ?number]] (d/db (d/connect uri)) "0000000000")
(decorate (ffirst (q '[:find $ ?number ?e :where [?e :creditcard/number ?number]] (d/db (d/connect uri)) "0000000002")))
(decorate (ffirst (q '[:find ?e :in $ ?number :where [?e :creditcard/number ?number]] (d/db (d/connect uri)) "0000000002")))
(ns clojure_bank.peer)
(find_creditcard_by_number "0000000001")
(find_creditcard_by_number "0000000002")
(start)
(use 'dev)
(start)
@(d/transact conn :creditcard/name "Konrad Scorciapino", :creditcard/number "0000000002", :creditcard/cvv "000", :creditcard/outstanding_balance 100.0, :creditcard/available_balance 100.0})
@(d/transact conn {:creditcard/name "Konrad Scorciapino", :creditcard/number "0000000002", :creditcard/cvv "000", :creditcard/outstanding_balance 100.0, :creditcard/available_balance 100.0})
@(d/transact  {:creditcard/name "Konrad Scorciapino", :creditcard/number "0000000002", :creditcard/cvv "000", :creditcard/outstanding_balance 100.0, :creditcard/available_balance 100.0})
(d/transact { :db/id #db/id[:db.part/user -1], :creditcard/name "Thiago Massa", :creditcard/number "0000000000", :creditcard/cvv "000", :creditcard/available_balance 100.0, :creditcard/outstanding_balance 100.0 })
(d/transact (d/db conn) { :db/id #db/id[:db.part/user -1], :creditcard/name "Thiago Massa", :creditcard/number "0000000000", :creditcard/cvv "000", :creditcard/available_balance 100.0, :creditcard/outstanding_balance 100.0 })
(ns clojure_bank.peer)
(d/transact (d/db conn) { :db/id #db/id[:db.part/user -1], :creditcard/name "Thiago Massa", :creditcard/number "0000000000", :creditcard/cvv "000", :creditcard/available_balance 100.0, :creditcard/outstanding_balance 100.0 })
(find_creditcard_by_number "0000000002")
(d/transact (d/db conn) { :db/id #db/id[:db.part/user -1], :creditcard/name "Thiago Massa", :creditcard/number "0000000000", :creditcard/cvv "000", :creditcard/available_balance 100.0, :creditcard/outstanding_balance 100.0 })
(d/transact (d/db (d/connect uri)) { :db/id #db/id[:db.part/user -1], :creditcard/name "Thiago Massa", :creditcard/number "0000000000", :creditcard/cvv "000", :creditcard/available_balance 100.0, :creditcard/outstanding_balance 100.0 })
(d/transact ((d/connect uri)) { :db/id #db/id[:db.part/user -1], :creditcard/name "Thiago Massa", :creditcard/number "0000000000", :creditcard/cvv "000", :creditcard/available_balance 100.0, :creditcard/outstanding_balance 100.0 })
@(d/transact conn {:creditcard/name "Konrad Scorciapino", :creditcard/number "0000000002", :creditcard/cvv "000", :creditcard/outstanding_balance 100.0, :creditcard/available_balance 100.0})
@(d/transact (d/connect uri) {:creditcard/name "Konrad Scorciapino", :creditcard/number "0000000002", :creditcard/cvv "000", :creditcard/outstanding_balance 100.0, :creditcard/available_balance 100.0})
@(d/transact (d/connect uri) [{:creditcard/name "Konrad Scorciapino", :creditcard/number "0000000002", :creditcard/cvv "000", :creditcard/outstanding_balance 100.0, :creditcard/available_balance 100.0}])
@(d/transact (d/connect uri) {:db/id #db/id[:db.part/user -10], :creditcard/name "Konrad Scorciapino", :creditcard/number "0000000002", :creditcard/cvv "000", :creditcard/outstanding_balance 100.0, :creditcard/available_balance 100.0}])
@(d/transact (d/connect uri) {:db/id #db/id[:db.part/user -10], :creditcard/name "Konrad Scorciapino", :creditcard/number "0000000002", :creditcard/cvv "000", :creditcard/outstanding_balance 100.0, :creditcard/available_balance 100.0})
@(d/transact (d/connect uri) [{:db/id #db/id[:db.part/user -10], :creditcard/name "Konrad Scorciapino", :creditcard/number "0000000002", :creditcard/cvv "000", :creditcard/outstanding_balance 100.0, :creditcard/available_balance 100.0}])
(defn save-creditcard [creditcard-info]
  (init-db)
  (let [conn (d/connect uri)]
    (d/transact conn [creditcard-info])))
(save-creditcard {:name Howard Roark})
(save-creditcard {:name "Howard Roark"})
(save-creditcard {:name "Howard Roark" :number "02289213"})
(save-creditcard {:name "Howard Roark" :number "02289213" :db/id #db/id[:db.part/user -100]})
(save-creditcard {:creditcard/name "Howard Roark" :creditcard/number "02289213" :db/id #db/id[:db.part/user -100]})
(save-creditcard {:creditcard/name "Howard Roark" :creditcard/number "02289213" :db/id #db/id[:db.part/user]})
(map {name "Thi"})
(map {name "Thi"} (fn[k v]) [k v])
(map {name "Thi"} (fn[k v] k))
(map (fn[x] x) {name "Thi"})
(map (fn[x] {x}) {name "Thi"})
(map (fn[k v] k) {name "Thi"})
(map (fn[[k v]] k) {name "Thi"})
(map (fn[[k v]] [k]) {name "Thi"})
(map (fn[[k v]] k) {name "Thi"})
(map (fn[[k v]] [k v]) {name "Thi"})
(apply (map (fn[[k v]] [k v]) {name "Thi"}))
(apply hash-map (flatten (map (fn [[k v]]
[(s/upper-case (name k)) v]) r))))
(into {} (for [[k v] { :stuff 42 :like 13 :this 7 }]
           [(.toUpperCase (name k)) v]))
(into {} (for [[k v] { :stuff 42 :like 13 :this 7 }]:(join ("creditcard/" k)) v]))
(into {} (for [[k v] { :stuff 42 :like 13 :this 7 }](join ("creditcard/" k)) v]))
(into {} (for [[k v] { :stuff 42 :like 13 :this 7 }](join "creditcard/" k)) v]))
(into {} (for [[k v] { :stuff 42 :like 13 :this 7 }]:(join ("creditcard/" k)) v]))
(into {} (for [[k v] { :stuff 42 :like 13 :this 7 }][(.toUpperCase (name k)) v]))
(into {} (for [[k v] { :stuff 42 :like 13 :this 7 }][(join "creditcard/" k) v]))
(into {} (for [[k v] { :stuff 42 :like 13 :this 7 }][( "creditcard/" k) v]))
(+ "a" "b")
( "a" "b")
(conc "a" "b")
(cat "a" "b")
(str "a" "b")
:(str "a" "b")
(str "a" "b")
(symbol (str "a" "b"))
(str :a :b)
(into {} (for [[k v] { :stuff 42 :like 13 :this 7 }][( "creditcard/" k) v]))
(into {} (for [[k v] { :stuff 42 :like 13 :this 7 }][(str "creditcard/" k) v]))
(type :a)
(into {} (for [[k v] { :stuff 42 :like 13 :this 7 }][(keyword "creditcard" k) v]))
(into {} (for [[k v] { :stuff 42 :like 13 :this 7 }][(keyword :creditcard k) v]))
(keyword :xpto :x)
(keyword :xpto (str :x))
(keyword "x" (str :x))
(keyword (keyword "x") :x)
(keyword :xpto (doc :x))
(keyword "x" (doc :x))
(keyword "x" (name :x))
(into {} (for [[k v] { :stuff 42 :like 13 :this 7 }][(keyword "creditcard" (name k)) v]))
(defn namespace-map
  [nspace kword]
  (into {} (for [[k v] kword ][(keyword nspace (name k)) v]))
)
(namespace-map "bla" { :stuff 42 :like 13 :this 7 })
(ns 'app)
(ns app)
(ns app')
(ns apps')
(ns app')
(start)
(ns app)
(start)
(use 'dev)
(start)
(use 'dev)
(start)
(save-creditcard {:name "Howard roark" :number "00005"})
(ns clojure_bank.peer)
(save-creditcard {:name "Howard roark" :number "00005"})
(save-creditcard (merge {:name "Howard roark" :number "00005"} {:db/id #db/id[:db.part/user]}))
(merge {:name "Howard roark" :number "00005"} {:db/id #db/id[:db.part/user]})
(save-creditcard {:name "Howard roark" :number "00005" :db/id #db/id[:db.part/user]})
(save-creditcard {:name "Howard roark" :number "00005" :db/id #db/id[:db.part/user -1]})
(use 'dev)
(start)
(save-creditcard {:name "Howard roark" :number "00005"})
(ns clojure_bank.peer)
(save-creditcard {:name "Howard roark" :number "00005"})
(save-creditcard {:name "Howard roark" :number "05"})
(use 'dev)
(start)
(use 'dev)
(start)
(use 'dev)
(start)
(use 'dev)
(start)
(use 'dev)
(start)
(use 'dev)
(start)
(use 'dev)
(start)
(use 'dev)
(start)
(use 'dev)
(start)
(use 'dev)
(start)
(ns clojure_bank.peer)
{:name "Howard Roark", :number "123", :cvv "000", :outstanding_balance "100.0", :available_balance "100.0"}
(save-creditcard {:name "Howard Roark", :number "123", :cvv "000", :outstanding_balance "100.0", :available_balance "100.0"})
(read-string "0.002")
(map (fn[[k v]] ([k v])) {:name "Howard Roark", :number "123", :cvv "000", :outstanding_balance "100.0", :available_balance "100.0"})
(map (fn[[k v]] (1)) {:name "Howard Roark", :number "123", :cvv "000", :outstanding_balance "100.0", :available_balance "100.0"})
(map (fn[[k v]] k) {:name "Howard Roark", :number "123", :cvv "000", :outstanding_balance "100.0", :available_balance "100.0"})
(map (fn[[k v]] [k v]) {:name "Howard Roark", :number "123", :cvv "000", :outstanding_balance "100.0", :available_balance "100.0"})
(apply (map (fn[[k v]] [k v]) {:name "Howard Roark", :number "123", :cvv "000", :outstanding_balance "100.0", :available_balance "100.0"}))
(apply (fn[x y] (merge x y)) (map (fn[[k v]] [k v]) {:name "Howard Roark", :number "123", :cvv "000", :outstanding_balance "100.0", :available_balance "100.0"}))
(apply (fn[x] (merge x)) (map (fn[[k v]] [k v]) {:name "Howard Roark", :number "123", :cvv "000", :outstanding_balance "100.0", :available_balance "100.0"}))
(map (fn[[k v]] [k v]) {:name "Howard Roark", :number "123", :cvv "000", :outstanding_balance "100.0", :available_balance "100.0"})
(read-string "blabla")
(type (read-string "blabla"))
(type (read-string "0."))
(type (read-string "0.1"))
(map (fn[[k v]] [k v]) {:name "Howard Roark", :number "123", :cvv "000", :outstanding_balance "100.0", :available_balance "100.0"})
(merge (map (fn[[k v]] [k v]) {:name "Howard Roark", :number "123", :cvv "000", :outstanding_balance "100.0", :available_balance "100.0"}))
(merge (map (fn[[k v]] {k v}) {:name "Howard Roark", :number "123", :cvv "000", :outstanding_balance "100.0", :available_balance "100.0"}))
(merge (map (fn[[k v]] k v) {:name "Howard Roark", :number "123", :cvv "000", :outstanding_balance "100.0", :available_balance "100.0"}))
(merge (map (fn[[k v]] {k v}) {:name "Howard Roark", :number "123", :cvv "000", :outstanding_balance "100.0", :available_balance "100.0"}))
(apply map (fn[[k v]] {k v}) {:name "Howard Roark", :number "123", :cvv "000", :outstanding_balance "100.0", :available_balance "100.0"}))
(apply map (fn[[k v]] {k v}) {:name "Howard Roark", :number "123", :cvv "000", :outstanding_balance "100.0", :available_balance "100.0"})
(merge (map (fn[[k v]] k v) {:name "Howard Roark", :number "123", :cvv "000", :outstanding_balance "100.0", :available_balance "100.0"}))
(merge (map (fn[[k v]] {k v}) {:name "Howard Roark", :number "123", :cvv "000", :outstanding_balance "100.0", :available_balance "100.0"}))
(apply merge fn[h] h (map (fn[[k v]] {k v}) {:name "Howard Roark", :number "123", :cvv "000", :outstanding_balance "100.0", :available_balance "100.0"}))
(apply merge (fn[h] h (map (fn[[k v]] {k v}) {:name "Howard Roark", :number "123", :cvv "000", :outstanding_balance "100.0", :available_balance "100.0"})))
(merge (map (fn[[k v]] {k v}) {:name "Howard Roark", :number "123", :cvv "000", :outstanding_balance "100.0", :available_balance "100.0"}))
(reduce merge (map (fn[[k v]] {k v}) {:name "Howard Roark", :number "123", :cvv "000", :outstanding_balance "100.0", :available_balance "100.0"}))
(reduce merge (map (fn[[k v]] {k (read-string v)}) {:name "Howard Roark", :number "123", :cvv "000", :outstanding_balance "100.0", :available_balance "100.0"}))
(if (:abc==:abc) (read-string "1") ("1"))
(if (= :abc :abc) (read-string "1") ("1"))
(if (= :abc :abc) (read-string "1.0") ("1.0"))
(if (= :abc :abcd) (read-string "1.0") ("1.0"))
(if (= :abc :abcd) (read-string "1.0") "1.0")
(if (= :abc :abc) (read-string "1.0") "1.0")
(reduce merge (map (fn[[k v]] {k (if (= k :outstanding_balance) (read-string v) v)}) {:name "Howard Roark", :number "123", :cvv "000", :outstanding_balance "100.0", :available_balance "100.0"}))
(reduce merge (map (fn[[k v]] {k (if (some k '(:outstanding_balance)) (read-string v) v)}) {:name "Howard Roark", :number "123", :cvv "000", :outstanding_balance "100.0", :available_balance "100.0"}))
(reduce merge (map (fn[[k v]] {k (if (some '(:outstanding_balance) k) (read-string v) v)}) {:name "Howard Roark", :number "123", :cvv "000", :outstanding_balance "100.0", :available_balance "100.0"}))
(reduce merge (map (fn[[k v]] {k (if (some k [:outstanding_balance]) (read-string v) v)}) {:name "Howard Roark", :number "123", :cvv "000", :outstanding_balance "100.0", :available_balance "100.0"}))
(some :lol [:lol])
(in? :lol [:lol])
(in? :lol(defn in?  [:lol])
  "true if seq contains elm"
  [seq elm]  
  (some #(= elm %) seq))
(defn in? 
  "true if seq contains elm"
  [seq elm]  
  (some #(= elm %) seq))
(in? :lol(defn in?  [:lol])
(in? :lol(defn in?  [:lol]))
(in? :lol [:lol])
(in? [:lol] :lol)
(in? [:lol] :loll)
(reduce merge (map (fn[[k v]] {k (if (in? [:outstanding_balance] k) (read-string v) v)}) {:name "Howard Roark", :number "123", :cvv "000", :outstanding_balance "100.0", :available_balance "100.0"}))
(ns clojure_bank.peer)
(convert-parameters-to-type {:name "1.0"} [:name])
(use 'dev)
(start)
(use 'dev)
(start)
(ns clojure_bank.peer)
(save-creditcard {:name "Howard Roark", :number "123", :cvv "000", :outstanding_balance "100.0", :available_balance "100.0"})
(ns clojure_bank.peer)
(save-creditcard {:name "Howard Roark", :number "123", :cvv "000", :outstanding_balance "100.0", :available_balance "100.0"})
(type 100.0)
(ns clojure_bank.peer)
(save-creditcard {:name "Howard Roark", :number "123", :cvv "000", :outstanding_balance "100.0", :available_balance "100.0"})
(use 'dev)
(start)
(ns clojure.peer)
(ns clojure_bank.peer)
(current-value "100")
(refresh)
(use 'dev)
(start)
(refresh)
(ns clojure_bank.peer)
(current-value "100")
(find-creditcard-by-number "10000000")
(ns clojure_bank.peer)
(find-creditcard-by-number "10000000")
(ns clojure_bank.peer)
(save-creditcard {:name "Howard roark" :number "00005"})
(ns clojure_bank.peer)
(save-creditcard {:name "Howard roark" :number "00005"})
(find-creditcard-by-number "00005")
(find-creditcard-by-number "00000000001")
(find-creditcard-by-number "000000000001")
(find-creditcard-by-number "000000001")
(find-creditcard-by-number "0000000000")
(get-in (find-creditcard-by-number "0000000000") [:creditcard/number])
(get-in (find-creditcard-by-number "0000000000") [:creditcard/outstanding_balance])
(get-in (find-creditcard-by-number "0000000000") [:creditcard/outstanding_balance :creditcard/available_balance])
(in? (find-creditcard-by-number "0000000000") :creditcard/outstanding_balance)
(contains? (find-creditcard-by-number "0000000000") :creditcard/outstanding_balance)
(select-keys (find-creditcard-by-number "0000000000") [:creditcard/outstanding_balance :creditcard/available_balance])
reload
(reload)
(get-balances '10000000')
(ns clojure_bank.peer)
(get-balances '10000000')
(ns clojure_bank.peer)
(get-balances '10000000')
(defn get-balances [creditcard-number]
  (select-keys (find-creditcard-by-number creditcard-number) [:creditcard/outstanding_balance :creditcard/available_balance]))
(defn get-balances [creditcard-number]
(get-balances '10000000')
get-balances '10000000'
(get-balances '10000000')
(get-balances '10000000'))
(get-balances '10000000')
(contains? (find-creditcard-by-number "0000000000") :creditcard/outstanding_balance)
(get-balances '10000000'))
(ns clojure_bank.peer)(defn get-balances [creditcard-number] (select-keys (find-creditcard-by-number creditcard-number) [:creditcard/outstanding_balance :creditcard/available_balance]))
(defn get-balances [creditcard-number] (select-keys (find-creditcard-by-number creditcard-number) [:creditcard/outstanding_balance :creditcard/available_balance]))
(get-balances '10000000'))
(get-balances '10000000'))=
(get-balances '10000000')
(select-keys (find-creditcard-by-number creditcard-number) [:creditcard/outstanding_balance :creditcard/available_balance]))
(select-keys (find-creditcard-by-number creditcard-number) [:creditcard/outstanding_balance :creditcard/available_balance])
(select-keys (find-creditcard-by-number creditcard-number) [:creditcard/outstanding_balance :creditcard/available_balance]))
(select-keys (find-creditcard-by-number creditcard-number) [:creditcard/outstanding_balance :creditcard/available_balance])
(defn get-balances [creditcard-number] (select-keys find-creditcard-by-number creditcard-number) [:creditcard/outstanding_balance :creditcard/available_balance]))
(defn get-balances [creditcard-number] (select-keys (find-creditcard-by-number creditcard-number) [:creditcard/outstanding_balance :creditcard/available_balance]))
(get-balances '10000000')
(get-balances '10000000'
))
get-balances '10000000')
(ns clojure_bank.peer)
get-balances '10000000'
(get-balances '10000000')
(save-creditcard {:name "Howard roark" :number "00005"})
(ns clojure_bank.peer)
(save-creditcard {:name "Howard roark" :number "00005"})
(ns clojure_bank.peer)
(save-creditcard {:name "Howard roark" :number "00005"})
(ns clojure_bank.peer)
(save-creditcard {:name "Howard roark" :number "00005"})
(ns clojure_bank.peer)
(save-creditcard {:name "Howard roark" :number "00005"})
(ns clojure_bank.peer)
(save-creditcard {:name "Howard roark" :number "00005"})
(get-balances '10000000')
(ns clojure_bank.peer)
(save-creditcard {:name "Howard roark" :number "00005"})
(ns clojure_bank.peer)
(get-balances '10000000')
(defn get-balances
  [creditcard-number]
  (select-keys {:creditcard/number 1}
               [:creditcard/outstanding_balance :creditcard/available_balance]))
(get-balances '10000000')
(ns clojure_bank.peer)
(get-balances '10000000')
(find-creditcard-by-number "00000000001")
(find-creditcard-by-number "0000000000")
(fn [cn] (find-creditcard-by-number cn))( "10")
(fn [cn] (find-creditcard-by-number cn) "10")
(fn [cn] (find-creditcard-by-number cn) "1000000")
(fn [cn] (find-creditcard-by-number cn))
((fn [cn] (find-creditcard-by-number cn)) "100")
((fn [cn] (find-creditcard-by-number cn)) "0000000000")
(get-balances '10000000')
(defn get-balance [creditcard-number] (find-creditcard-by-number creditcard-number))
(get-balance '10000000')
(defn get-balance [creditcard-number] (find-creditcard-by-number creditcard-number)
(def bla (fn [cn] (find-creditcard-by-number cn)) "0000000000"))
(def bla (fn [cn] (find-creditcard-by-number cn)) "0000000000")
(def bla (fn [cn] (find-creditcard-by-number cn)))
(bla '1000')
(find-creditcard-by-number '1000')
(find-creditcard-by-number '10000000000')
(ns clojure_bank.peer)
(find-creditcard-by-number '10000000000')
(find-creditcard-by-number '100000')
(ns clojure_bank.peer)
(find-creditcard-by-number '100000')
(ns clojure_bank.peer)
(find-creditcard-by-number '100000')
(ns clojure_bank.peer)
(find-creditcard-by-number '100000')
(ns clojure_bank.peer)
(find-creditcard-by-number '100000')
(ns clojure_bank.peer)
(find-creditcard-by-number '100000')
(find-creditcard-by-number '1')
(find-creditcard-by-number '1000000000')
(find-creditcard-by-number '0000000000')
(find-creditcard-by-number '000000000')
(ns clojure_bank.peer)
(find-creditcard-by-number '000000000')
(find-creditcard-by-number "000000000")
(ns clojure_bank.peer)
(get-balances "0000000000")
(-1000)
(- 100 -100
)
(- -100 -100)
(int -100)
(- 100)
(ns clojure_bank.peer)
(update-balance '1000' '100)
(update-balance '1000' '100')
(get-balances "0000000000")
(compute-outstanding-balance 100 10)
(update-balance '1000' '100)
(update-balance 1000 100)
(update-balance 1000)
(update-balance 1000 100)
(update-balance 1000 10)
(update-balance 1000 10 100)
(update-balance)
(ns clojure_bank.peer)
(update-balance 1000 10 100)
(update-balance 1000 10)
(ns clojure_bank.peer)
(update-balance 1000 10)
(update-balance 1000)
(update-balance 1000 10)
(ns clojure_bank.peer)
(update-balance 1000 10)
  (let
    [outstanding-balance :as (compute-outstanding-balance 100) avaialable-balance :as (compute-available-balance 100)]
    outstanding-balance
  )
  (let [outstanding-balance (compute-outstanding-balance 100) avaialable-balance (compute-available-balance 100)]
    outstanding-balance
  )
  (let
  (let [outstanding-balance (compute-outstanding-balance 100) avaialable-balance (compute-available-balance 100)]
    outstanding-balance
  )
(ns clojure_bank.peer)
  (let [outstanding-balance (compute-outstanding-balance 100) avaialable-balance (compute-available-balance 100)]
    outstanding-balance
  )
  (let [outstanding-balance (compute-outstanding-balance 1000 100) avaialable-balance (compute-available-balance 1000  100)]
    outstanding-balance
  )
(ns clojure_bank.peer)
  (let [outstanding-balance (compute-outstanding-balance 1000 100) avaialable-balance (compute-available-balance 1000  100)]
    outstanding-balance
  )
(ns clojure_bank.peer)
(update-balance 100 1)
(update-balance "000000000" 1)
(ns clojure_bank.peer)
(update-balance "000000000" 1)
(update-balance "0000000000" 1)
(update-balance "00000000000" 1)
(update-balance "000000000000" 1)
(update-balance "0000000000" 1)
(update-balance "000(get-in (get-balances creditcard-number) :creditcard/available_balance) 1)
(get-in (get-balances "0000000000") :creditcard/available_balance)
(get-in (get-balances "00000000000") :creditcard/available_balance)
(get-in (get-balances "00000000000") [:creditcard/available_balance])
(get-in (get-balances "000000000000") [:creditcard/available_balance])
(get-in (get-balances "0000000000") [:creditcard/available_balance])
(update-balance "0000000000" 1)
(update-balance "00000000000" 1)
(update-balance "000000000" 1)
(ns clojure_bank.peer)
(update-balance "0000000000" 1)
(ns clojure_bank.peer)
(update-balance "0000000000" 1)
(ns clojure_bank.peer)
(update-balance "0000000000" 1)
(ns clojure_bank.peer)
(update-balance "0000000000" 1)
(ns clojure_bank.peer)
(update-balance "0000000000" 1)
(ns clojure_bank.peer)
(update-balance "0000000000" 1)
(ns clojure_bank.peer)
(update-balance "0000000000" 1)
(ns clojure_bank.peer)
(update-balance "0000000000" 1)
(ns clojure_bank.peer)
(update-balance "0000000000" 1)
(ns clojure_bank.peer)
(update-balance "0000000000" 1)
(ns clojure_bank.peer)
(update-balance "0000000000" 1)
(ns clojure_bank.peer)
(update-balance "0000000000" 1)
(use 'dev)
(start)
(update-balance "0000000000" 1)
(use 'dev)
(start)
(reload)
(restart)
(use 'dev)
(start)
(reload)
(ns clojure_bank.peer)
(use 'dev)
(start)
(use 'dev)
(start)
(use 'dev)
(start)
(read-str "100")
(use 'dev)
(start)
(use 'dev)
(start)
(update-balance "0000000000" 1)
(update-balance "00000000000" 1)
(ns clojure_bank.peer)
(update-balance "00000000000" 1)
(update-balance "0000000000" 1)
(update-balance "0000000000" 10)
(update-balance "0000000000" -10)
(update-balance "0000000000" 10)
(update-balance "0000000000" -10)
(update-balance "0000000000" 10)
(ns clojure_bank.peer)
(update-balance "0000000000" 10)
(use 'dev)
(start)
(update-balance "0000000000" 10)
(use 'dev)
(start)
(ns clojure_bank.peer)
(update-balance "0000000000" 10)
(ns clojure_bank.peer)
(update-balance "0000000000" 10)
(ns clojure_bank.peer)
(update-balance "0000000000" 10)
(ns clojure_bank.peer)
(update-balance "0000000000" 10)
(ns clojure_bank.peer)
(update-balance "0000000000" 10)
